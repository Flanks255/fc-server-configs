# Whether the Discord integration is default enabled for integrated servers (i.e. singleplayer).
# You can use the concord commands to force-enable discord integration for a session, if needed.
enable_integrated = false

# Hooks settings
[hooks]
	# Enable the hook in the /say command to intercept and relay messages.
	# Usually does not cause compatibility issues. Takes effect upon config reload.
	say_command = true
	# Enable the hook in the /me command to intercept and relay messages.
	# Usually does not cause compatibility issues. Takes effect upon config reload.
	emote_command = true

# Discord connection settings
[discord]
	# The token for the bot application.
	# If empty, the Discord integration will not be enabled.
	token = ""
	# The snowflake ID of the guild where this bot belongs to.
	# If empty, the Discord integration will not be enabled.
	guild_id = ""
	# The snowflake ID of the channel where this bot will post and receive messages.
	# If empty, the Discord integration will not be enabled.
	chat_channel_id = ""
	# The snowflake ID of the channel where this bot will post reports from in-game users.
	# If empty, reports will be disabled.
	report_channel_id = ""
	# The relay webhook, used for sending better-formatted chat-to-Discord messages.
	# This should either be a full webhook URL (with ID and token), or the ID of the webhook.
	# If empty, messages will be sent normally as the bot user.
	relay_webhook = ""

# Message settings
[messages]
	# Use the custom `concord:icons` icons font (e.g owner crown) when possible.
	# If true, clients with the mod will use the custom icons font.
	# Set to false if you cannot ensure that all clients will have the mod installed.
	use_custom_font = true
	# Lazily translate the messages when possible.
	# This requires the clients have a resource pack with the messages, else they will render weirdly.
	# If false, all translation keys will be translated on the server.
	# If true, translation keys will translated on the server only if the client does not have the mod installed.
	# Set to false if you cannot ensure that all clients will have the mod installed.
	lazy_translate = true
	# Allow Discord users to use Concord Message Formatting Codes in a message.
	# This will cause in-game messages to have color formatting.
	# To use it, send a message with a dollar sign ($) followed by either an English-language color (ie. $red), or a hex code (ie. $#FF0000).
	# Names are delimited by a space which will be consumed, so the string "this is a $red colored text" will be shown as "this is a colored text".
	# Overrides legacy formatting when enabled. Is overridden by veiled links.
	use_custom_formatting = false
	# Allow Discord users to put legacy-style chat formatting (&5, etc) in a message.
	# This will cause in-game messages to have color, bold, italic, strikethrough and "obfuscated" formatting.
	# Note however, that this only works with vanilla formatting codes, and is likely to cause weirdness.
	# Is overridden by custom formatting or veiled links.
	use_legacy_formatting = false
	# Configures when the Server Owner crown is visible to clients.
	# ALWAYS means the crown is always visible, NEVER means the crown is never visible.
	# WITHOUT_ADMINISTRATORS means it is only visible when there are no hoisted Administrator roles.
	# Allowed Values: ALWAYS, WITHOUT_ADMINISTRATORS, NEVER
	hide_crown = "WITHOUT_ADMINISTRATORS"
	# The URL used for the avatar when sending messages using the relay webhook.
	# The following placeholders can be used within the URL:
	#  - '{uuid}' is replaced with the UUID of the player, without any dashes (e.g 00112233445566778899aabbccddeeff)
	#  - '{uuid-dash}' is replaced with the UUID of the player, with dashes (e.g. 00112233-4455-6677-8899-aabbccddeeff)
	#  - '{username}' is replaced with the username of the player (e.g. Dev)
	# If blank, no avatar will be set (the webhook's configured avatar applies).
	webhook_avatar_url = ""
	# Hides the listed roles from the hover information on a player.
	# This is useful for servers which wish to keep the name and roles of the connected guild hidden,
	# such as for private servers whose players stream on public platforms.
	hide_roles = false
	# Obscures links by veiling the full URL through an on-hover component.
	# (For now, this affects all links, while Markdown is not implemented yet.)
	# This is useful to prevent public watchers of in-game chat (such as through players streaming on
	# public platforms) from accessing links, and/or reducing the space links might occupy in in-game chat.
	# Overrides legacy formatting and custom formatting when enabled.
	veiled_links = true

# Mention settings
# Settings for when messages from Concord that contain mentions should cause pings.
# These are only bot-side settings; permissions on the bot user may prevent certain mentions from pinging.
[mentions]
	# Allow mentions to cause pings.
	# Disabling this setting effectively disables all other settings in this category.
	allow_mentions = true
	# Allow @everyone and @here mentions to cause pings.
	allow_public_mentions = false
	# Allow user mentions to cause pings.
	allow_user_mentions = true
	# Allow role mentions to cause pings.
	allow_role_mentions = true

# Game notification settings
# Each setting controls a specific game to Discord notification message.
[notify]

	[notify.server]
		# Complete startup of server
		# Translation key: message.concord.server.start
		start = true
		# Stopping of server.
		# Translation key: message.concord.server.stop
		stop = true

	[notify.bot]
		# Enabling of Discord integration.
		# Translation key: message.concord.bot.start
		start = false
		# Disabling of Discord integration.
		# Translation key: message.concord.bot.stop
		stop = false

	[notify.player]
		# Player joining the game
		# Translation key: message.concord.player.join
		join = true
		# Player leaving the game
		# Translation key: message.concord.player.leave
		leave = true
		# Player death message
		death = true

		[notify.player.adv]
			# Whether to respect the `announceAdvancements` gamerule
			# If true, then the other advancement notifications settings only apply if the gamerule is true.
			# If false, the advancement notifications settings always apply.
			respect_gamerule = true
			# Player completed an normal advancement
			# Translation key: message.concord.player.advancement.task
			task = true
			# Player completed a challenge advancement
			# Translation key: message.concord.player.advancement.challenge
			challenge = true
			# Player completed a goal advancement
			# Translation key: message.concord.player.advancement.goal
			goal = true

	[notify.command]
		# Message from /say command
		# Translation key: message.concord.command.say
		say = true
		# Message from /me command
		# Translation key: message.concord.command.emote
		emote = true

